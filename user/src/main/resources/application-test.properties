#端口配置
server.port=6002
#tomcat最大线程数，默认为200
server.tomcat.threads.max=250
#tomcat最大连接数
server.tomcat.max-connections=2500
#tomcat的URI编码
server.tomcat.uri-encoding=UTF-8

#项目名称
#spring.application.name=wl-study

#数据源配置
db.host=localhost
db.port=3306
db.name=wl-study
db.username=root
db.password=123456789
#redis数据源配置
redis.host=${db.host}
redis.database=13
redis.port=6379
redis.password=123456
#mongodb数据源配置
#mongodb.database=themis-admin
#mongodb.host=${db.host}
#mongodb.port=27017
spring.datasource.url=jdbc:mysql://${db.host}:${db.port}/${db.name}?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=${db.username}
spring.datasource.password=${db.password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#下面为druid连接池的补充设置，应用到上面所有数据源中
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.initial-size=10
#最小连接池数量
spring.datasource.min-idle=40
#最大连接池数量
spring.datasource.max-active=200
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.max-wait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.time-between-eviction-runs-millis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.min-evictable-idle-time-millis=300000
#用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
spring.datasource.validation-query=SELECT 1 FROM DUAL
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.test-while-idle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.test-on-borrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.test-on-return=false
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(mysql5.5+建议开启)
spring.datasource.pool-prepared-statements=true
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
spring.datasource.max-pool-prepared-statement-per-connection-size=20
#配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,slf4j
#合并多个datasource监控
spring.datasource.use-global-data-source-stat=true
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connect-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;
#只要将其值更改为false时就可以解决如下问题，即存在id或者name相同的bean时，不是打印出相关信息，而是直接抛异常，这样就可以迫使开发人员必须解决id或者name重复的问题后才能成功启动容器。然后就尝试了下，
spring.main.allow-bean-definition-overriding=false

#日志配置
logging.level.root=info

# MyBatis-Plus配置
mybatis-plus.typeAliasesPackage=com.wl.study.business.entity
mybatis-plus.mapper-locations=classpath:/mapper/*Mapper.xml
mybatis-plus.global-config.id-type=1
mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
logging.level.com.qmth.themis.business.dao=debug
mybatis-plus.configuration.call-setters-on-nulls=true

#redis
spring.redis.database=${redis.database}
spring.redis.host=${redis.host}
spring.redis.port=${redis.port}
spring.redis.password=${redis.password}
# 连接池最大阻塞等待时间（使用负值表示没有限制）
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=30
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1ms
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=5
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=1
# 连接超时时间（毫秒）
spring.redis.jedis.timeout=180000

#日期格式化
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

#系统配置
sys.config.oss=true
sys.config.attachmentType=.xlsx,.xls,.doc,.docx,.pdf,.jpg,.jpeg,.png,.html,.zip,.mp3,.wav,.dll,.exe
sys.config.serverUpload=/Users/king/git/themis-files/
spring.resources.static-locations=file:${sys.config.serverUpload},classpath:/META-INF/resources/,classpath:/resources/

#api前缀
prefix.url.admin=api/admin

spring.cloud.sentinel.transport.dashboard=127.0.0.1:8888
spring.cloud.sentinel.eager=true
spring.cloud.sentinel.datasource.ds1.file.file=classpath: flowrule.json
spring.cloud.sentinel.datasource.ds1.file.rule-type=flow
spring.cloud.sentinel.datasource.ds1.file.data-type=json
spring.cloud.sentinel.datasource.ds2.file.file=classpath: degraderule.json
spring.cloud.sentinel.datasource.ds2.file.rule-type=degrade
spring.cloud.sentinel.datasource.ds2.file.data-type=json